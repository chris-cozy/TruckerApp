openapi: 3.0.0
info:
  title: TruckerTrack
  description: The backend API for TruckerTrack
  version: 1.0.0

security:
  - basicAuth: []

paths:
  /v1/users:
    get:
      summary: Retrieve a list of users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              example:
                - user_id: 1
                  first_name: John
                  last_name: Doe
                  email: john@example.com
                  user_type: driver
                - user_id: 2
                  first_name: Jane
                  last_name: Smith
                  email: jane@example.com
                  user_type: sponsor
    post:
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              first_name: John
              last_name: Doe
              email: john@example.com
              password_hash: hashed_password
              user_type: driver
      responses:
        '201':
          description: User created successfully
  
  /v1/users/{user_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve user by ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              example:
                user_id: 1
                first_name: John
                last_name: Doe
                email: john@example.com
                user_type: driver
        '404':
          description: User not found
    put:
      summary: Update user by ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              first_name: Updated John
              last_name: Updated Doe
              email: john@example.com
              password_hash: updated_hashed_password
              user_type: driver
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found
    delete:
      summary: Delete user by ID
      responses:
        '204':
          description: User deleted successfully

  /v1/addresses:
    get:
      summary: Retrieve a list of addresses
      responses:
        '200':
          description: A list of addresses
          content:
            application/json:
              example:
                - address_id: 1
                  street: 123 Main St
                  city: Sample City
                  state: CA
                  zipcode: 12345
                - address_id: 2
                  street: 456 Elm St
                  city: Another City
                  state: NY
                  zipcode: 54321
    post:
      summary: Create a new address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
            example:
              street: 789 Oak St
              city: New Town
              state: TX
              zipcode: 67890
      responses:
        '201':
          description: Address created successfully

  /v1/drivers:
    get:
      summary: Retrieve a list of drivers
      responses:
        '200':
          description: A list of drivers
          content:
            application/json:
              example:
                - user_id: 1
                  vehicle_id: 101
                  sponsor_id: 2
                  address_id: 3
                  biography: Driver's biography...
                  phone_number: +1234567890
                  date_of_birth: 1990-05-15
                  drivers_license_number: DL12345
                  cdl_class: Class A
                  years_of_experience: 5
                  accident_count: 0
                  violation_count: 1
                  suspended_license_incident: false
                  point_balance: 100
                - user_id: 2
                  # More driver objects...
    post:
      summary: Create a new driver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Driver'
            example:
              user_id: 3
              vehicle_id: 102
              sponsor_id: 4
              address_id: 5
              biography: New driver's biography...
              phone_number: +9876543210
              date_of_birth: 1995-03-20
              drivers_license_number: DL67890
              cdl_class: Class B
              years_of_experience: 3
              accident_count: 2
              violation_count: 0
              suspended_license_incident: true
              point_balance: 50
      responses:
        '201':
          description: Driver created successfully
  
  /v1//drivers/{user_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve driver by user ID
      responses:
        '200':
          description: Driver details
          content:
            application/json:
              example:
                user_id: 1
                vehicle_id: 101
                sponsor_id: 2
                address_id: 3
                # More driver attributes...
        '404':
          description: Driver not found
    put:
      summary: Update driver by user ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Driver'
            example:
              vehicle_id: 103
              years_of_experience: 4
              accident_count: 1
              violation_count: 0
              suspended_license_incident: false
      responses:
        '200':
          description: Driver updated successfully
        '404':
          description: Driver not found
    delete:
      summary: Delete driver by user ID
      responses:
        '204':
          description: Driver deleted successfully

  /v1/sponsors:
    get:
      summary: Retrieve a list of sponsors
      responses:
        '200':
          description: A list of sponsors
          content:
            application/json:
              example:
                - user_id: 2
                  organization_id: 5
                  biography: Sponsor's biography...
                  phone_number: +9876543210
                - user_id: 4
                  organization_id: 6
                  biography: Another sponsor's biography...
                  phone_number: +1234567890
    post:
      summary: Create a new sponsor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sponsor'
            example:
              user_id: 3
              organization_id: 7
              biography: New sponsor's biography...
              phone_number: +1112223333
      responses:
        '201':
          description: Sponsor created successfully

  /v1/sponsors/{user_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve sponsor by user ID
      responses:
        '200':
          description: Sponsor details
          content:
            application/json:
              example:
                user_id: 2
                organization_id: 5
                biography: Sponsor's biography...
        '404':
          description: Sponsor not found
    put:
      summary: Update sponsor by user ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sponsor'
            example:
              organization_id: 8
              biography: Updated sponsor's biography...
      responses:
        '200':
          description: Sponsor updated successfully
        '404':
          description: Sponsor not found
    delete:
      summary: Delete sponsor by user ID
      responses:
        '204':
          description: Sponsor deleted successfully

  /v1/admins:
    get:
      summary: Retrieve a list of admins
      responses:
        '200':
          description: A list of admins
          content:
            application/json:
              example:
                - user_id: 6
                - user_id: 7
    post:
      summary: Create a new admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
            example:
              user_id: 8
      responses:
        '201':
          description: Admin created successfully

  /v1/admins/{user_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve admin by user ID
      responses:
        '200':
          description: Admin details
          content:
            application/json:
              example:
                user_id: 6
        '404':
          description: Admin not found
    put:
      summary: Update admin by user ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
            example:
              # Update admin properties here
      responses:
        '200':
          description: Admin updated successfully
        '404':
          description: Admin not found
    delete:
      summary: Delete admin by user ID
      responses:
        '204':
          description: Admin deleted successfully

  /v1/organizations:
    get:
      summary: Retrieve a list of organizations
      responses:
        '200':
          description: A list of organizations
          content:
            application/json:
              example:
                - organization_id: 1
                  name: Example Org
                  biography: Organization's biography...
                  address_id: 4
                - organization_id: 2
                  name: Another Org
                  biography: Another organization's biography...
                  address_id: 5
    post:
      summary: Create a new organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
            example:
              organization_id: 3
              name: New Org
              biography: New organization's biography...
              address_id: 6
      responses:
        '201':
          description: Organization created successfully

  /v1/organizations/{organization_id}:
    parameters:
      - name: organization_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve organization by organization ID
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              example:
                organization_id: 1
                name: Example Org
                biography: Organization's biography...
                address_id: 4
        '404':
          description: Organization not found
    put:
      summary: Update organization by organization ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
            example:
              name: Updated Org
              biography: Updated organization's biography...
      responses:
        '200':
          description: Organization updated successfully
        '404':
          description: Organization not found
    delete:
      summary: Delete organization by organization ID
      responses:
        '204':
          description: Organization deleted successfully

  /v1/vehicles:
    get:
      summary: Retrieve a list of vehicles
      responses:
        '200':
          description: A list of vehicles
          content:
            application/json:
              example:
                - vehicle_id: 101
                  vehicle_type: Sedan
                  make: Toyota
                  model: Camry
                  license_plate: ABC123
                  registration_expiry: 2023-12-31
                  insurance_provider: Example Insurance
                  insurance_policy_number: INS12345
                  insurance_policy_expiry: 2024-06-30
                - vehicle_id: 102
                  vehicle_type: SUV
                  make: Ford
                  model: Explorer
                  license_plate: XYZ789
                  registration_expiry: 2024-05-31
                  insurance_provider: Another Insurance
                  insurance_policy_number: INS67890
                  insurance_policy_expiry: 2024-07-31
    post:
      summary: Create a new vehicle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
            example:
              vehicle_id: 103
              vehicle_type: Sedan
              make: Honda
              model: Accord
              license_plate: DEF456
              registration_expiry: 2024-09-30
              insurance_provider: New Insurance
              insurance_policy_number: INS98765
              insurance_policy_expiry: 2024-08-31
      responses:
        '201':
          description: Vehicle created successfully
  
  /v1/vehicles/{vehicle_id}:
    parameters:
      - name: vehicle_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve vehicle by vehicle ID
      responses:
        '200':
          description: Vehicle details
          content:
            application/json:
              example:
                vehicle_id: 101
                vehicle_type: Sedan
                make: Toyota
                model: Camry
                license_plate: ABC123
                registration_expiry: 2023-12-31
                insurance_provider: Example Insurance
                insurance_policy_number: INS12345
                insurance_policy_expiry: 2024-06-30
        '404':
          description: Vehicle not found
    put:
      summary: Update vehicle by vehicle ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
            example:
              vehicle_type: SUV
              make: Ford
              model: Explorer
              license_plate: XYZ789
              registration_expiry: 2024-05-31
              insurance_provider: Updated Insurance
              insurance_policy_number: INS67890
              insurance_policy_expiry: 2024-07-31
      responses:
        '200':
          description: Vehicle updated successfully
        '404':
          description: Vehicle not found
    delete:
      summary: Delete vehicle by vehicle ID
      responses:
        '204':
          description: Vehicle deleted successfully

  /v1/applications:
    get:
      summary: Retrieve a list of applications
      responses:
        '200':
          description: A list of applications
          content:
            application/json:
              example:
                - application_id: 1
                  driver_id: 101
                  sponsor_id: 201
                  reason_for_sponsorship: Application reason...
                  terms_agreement: true
                - application_id: 2
                  driver_id: 102
                  sponsor_id: 202
                  reason_for_sponsorship: Another reason...
                  terms_agreement: false
    post:
      summary: Create a new application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
            example:
              application_id: 3
              driver_id: 103
              sponsor_id: 203
              reason_for_sponsorship: New application reason...
              terms_agreement: true
      responses:
        '201':
          description: Application created successfully

  /v1/applications/{application_id}:
    parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve application by application ID
      responses:
        '200':
          description: Application details
          content:
            application/json:
              example:
                application_id: 1
                driver_id: 101
                sponsor_id: 201
                reason_for_sponsorship: Application reason...
                terms_agreement: true
        '404':
          description: Application not found
    put:
      summary: Update application by application ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
            example:
              reason_for_sponsorship: Updated application reason...
              terms_agreement: false
      responses:
        '200':
          description: Application updated successfully
        '404':
          description: Application not found
    delete:
      summary: Delete application by application ID
      responses:
        '204':
          description: Application deleted successfully

  /v1/product_categories:
    get:
      summary: Retrieve a list of product categories
      responses:
        '200':
          description: A list of product categories
          content:
            application/json:
              example:
                - category_id: 1
                  name: Electronics
                  description: Electronic products
                - category_id: 2
                  name: Clothing
                  description: Apparel and clothing items
    post:
      summary: Create a new product category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
            example:
              category_id: 3
              name: Books
              description: Books and literature
      responses:
        '201':
          description: Product category created successfully

  /v1/product_categories/{category_id}:
    parameters:
      - name: category_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve product category by category ID
      responses:
        '200':
          description: Product category details
          content:
            application/json:
              example:
                category_id: 1
                name: Electronics
                description: Electronic products
        '404':
          description: Product category not found
    put:
      summary: Update product category by category ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
            example:
              name: Updated Category
              description: Updated category description
      responses:
        '200':
          description: Product category updated successfully
        '404':
          description: Product category not found
    delete:
      summary: Delete product category by category ID
      responses:
        '204':
          description: Product category deleted successfully

  /v1/products:
    get:
      summary: Retrieve a list of products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              example:
                - product_id: 1
                  name: Laptop
                  description: High-performance laptop
                  image_url: https://example.com/laptop.jpg
                  condition: New
                  price: 999.99
                  category_id: 1
                - product_id: 2
                  name: Smartphone
                  description: Latest smartphone model
                  image_url: https://example.com/smartphone.jpg
                  condition: New
                  price: 599.99
                  category_id: 1
    post:
      summary: Create a new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              product_id: 3
              name: Tablet
              description: High-resolution tablet
              image_url: https://example.com/tablet.jpg
              condition: New
              price: 299.99
              category_id: 2
      responses:
        '201':
          description: Product created successfully

  /v1/products/{product_id}:
    parameters:
      - name: product_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve product by product ID
      responses:
        '200':
          description: Product details
          content:
            application/json:
              example:
                product_id: 1
                name: Laptop
                description: High-performance laptop
                image_url: https://example.com/laptop.jpg
                condition: New
                price: 999.99
                category_id: 1
        '404':
          description: Product not found
    put:
      summary: Update product by product ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              name: Updated Laptop
              description: Updated laptop description
      responses:
        '200':
          description: Product updated successfully
        '404':
          description: Product not found
    delete:
      summary: Delete product by product ID
      responses:
        '204':
          description: Product deleted successfully

  /v1/sponsor_inventory:
    get:
      summary: Retrieve a list of sponsor inventory items
      responses:
        '200':
          description: A list of sponsor inventory items
          content:
            application/json:
              example:
                - inventory_id: 1
                  sponsor_id: 201
                  product_id: 1
                - inventory_id: 2
                  sponsor_id: 202
                  product_id: 2
    post:
      summary: Add a product to sponsor inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SponsorInventory'
            example:
              inventory_id: 3
              sponsor_id: 203
              product_id: 3
      responses:
        '201':
          description: Product added to sponsor inventory successfully

  /v1/sponsor_inventory/{inventory_id}:
    parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve sponsor inventory item by inventory ID
      responses:
        '200':
          description: Sponsor inventory item details
          content:
            application/json:
              example:
                inventory_id: 1
                sponsor_id: 201
                product_id: 1
        '404':
          description: Sponsor inventory item not found
    delete:
      summary: Remove a product from sponsor inventory by inventory ID
      responses:
        '204':
          description: Product removed from sponsor inventory successfully

  /v1/points:
    get:
      summary: Retrieve a list of points transactions
      responses:
        '200':
          description: A list of points transactions
          content:
            application/json:
              example:
                - point_id: 1
                  driver_id: 101
                  sponsor_id: 201
                  amount: 100
                  reason: Points earned
                  date: "2023-09-15T10:30:00Z"
                - point_id: 2
                  driver_id: 102
                  sponsor_id: 202
                  amount: -50
                  reason: Points redeemed
                  date: "2023-09-16T14:45:00Z"
    post:
      summary: Add a points transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PointTransaction'
            example:
              point_id: 3
              driver_id: 103
              sponsor_id: 203
              amount: 75
              reason: Points earned for a purchase
              date: "2023-09-17T09:00:00Z"
      responses:
        '201':
          description: Points transaction added successfully

  /v1/points/{point_id}:
    parameters:
      - name: point_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve points transaction by point ID
      responses:
        '200':
          description: Points transaction details
          content:
            application/json:
              example:
                point_id: 1
                driver_id: 101
                sponsor_id: 201
                amount: 100
                reason: Points earned
                date: "2023-09-15T10:30:00Z"
        '404':
          description: Points transaction not found
    delete:
      summary: Remove a points transaction by point ID
      responses:
        '204':
          description: Points transaction removed successfully

  /v1/orders:
    get:
      summary: Retrieve a list of orders
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              example:
                - order_id: 1
                  driver_id: 101
                  points_cost: 100
                  usd_cost: 50.00
                  date: "2023-09-15T10:30:00Z"
                - order_id: 2
                  driver_id: 102
                  points_cost: 75
                  usd_cost: 35.00
                  date: "2023-09-16T14:45:00Z"
    post:
      summary: Create a new order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            example:
              order_id: 3
              driver_id: 103
              points_cost: 50
              usd_cost: 25.00
              date: "2023-09-17T09:00:00Z"
      responses:
        '201':
          description: Order created successfully

  /v1/orders/{order_id}:
    parameters:
      - name: order_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve order by order ID
      responses:
        '200':
          description: Order details
          content:
            application/json:
              example:
                order_id: 1
                driver_id: 101
                points_cost: 100
                usd_cost: 50.00
                date: "2023-09-15T10:30:00Z"
        '404':
          description: Order not found
    delete:
      summary: Delete order by order ID
      responses:
        '204':
          description: Order deleted successfully

  /v1/order_products:
    get:
      summary: Retrieve a list of order products
      responses:
        '200':
          description: A list of order products
          content:
            application/json:
              example:
                - order_product_id: 1
                  order_id: 101
                  product_id: 201
                  quantity: 2
                  points_cost: 50
                - order_product_id: 2
                  order_id: 102
                  product_id: 202
                  quantity: 1
                  points_cost: 25
    post:
      summary: Add a product to an order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderProduct'
            example:
              order_product_id: 3
              order_id: 103
              product_id: 203
              quantity: 3
              points_cost: 75
      responses:
        '201':
          description: Product added to order successfully

  /v1/order_products/{order_product_id}:
    parameters:
      - name: order_product_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve order product by order product ID
      responses:
        '200':
          description: Order product details
          content:
            application/json:
              example:
                order_product_id: 1
                order_id: 101
                product_id: 201
                quantity: 2
                points_cost: 50
        '404':
          description: Order product not found
    delete:
      summary: Remove a product from an order by order product ID
      responses:
        '204':
          description: Product removed from order successfully

  /v1/auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: HTTP 201 - User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400Error"

  /v1/auth/login:
    post:
      tags:
        - Auth
      summary: Log in an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: HTTP 200 - User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/401UnauthorizedError"

  /v1/auth/logout:
    delete:
      tags:
          - Auth
        summary: Log out the current user
        responses:
          "200":
            description: HTTP 200 - User logged out successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
          "401":
            $ref: "#/components/responses/401UnauthorizedError"

  /v1/ebay/{keyword}:
    get:
      tags:
        - Ebay
      summary: Search ebay products by keyword
      parameters:
        - name: keyword
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: HTTP 200 - Successfully returned products
          content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Product"
        "404":
          $ref: "#/components/responses/404ProductError"


paths:
  /v1/drivers:
    get:
      tags:
        - Driver
      summary: Get all drivers' information
      parameters:
        - name: sponsor_id
          in: query
          description: To limit drivers to those under a certain sponsor
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: HTTP 200 - Successfully returned drivers' information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Driver"
        "404":
          $ref: "#/components/responses/404DriverError"

    post:
      tags:
        - Driver
      summary: Create a new driver
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Driver"
      responses:
        "201":
          description: HTTP 201 - Driver created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Driver"
        "400":
          $ref: "#/components/responses/400Error"

    delete:
      tags:
        - Driver
      summary: Delete all drivers
      responses:
        "204":
          description: HTTP 204 - Successfully deleted all drivers
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          $ref: "#/components/responses/404DriverError"

  /v1/drivers/{user_id}:
    get:
      tags:
        - Driver
      summary: Get specified driver's information
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: HTTP 200 - Successfully returned driver information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Driver"
        "404":
          $ref: "#/components/responses/404DriverError"

    put:
      tags:
        - Driver
      summary: Update specified driver's information
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Driver"
      responses:
        "200":
          description: HTTP 200 - Successfully updated driver information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Driver"
        "404":
          $ref: "#/components/responses/404DriverError"

    delete:
      tags:
        - Driver
      summary: Delete specified driver
      parameters:
        - name: driver_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: HTTP 200 - Successfully deleted driver
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Driver"
        "404":
          $ref: "#/components/responses/404DriverError"

  /v1/sponsors:
    get:
      tags:
        - Sponsor
      summary: Get all sponsors' information
      parameters:
        - name: driver_id
          in: query
          description: To limit sponsors to those for a certain driver
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: HTTP 200 - Successfully returned sponsors' information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Sponsor"
        "404":
          $ref: "#/components/responses/404SponsorError"

    post:
      tags:
        - Sponsor
      summary: Create a new sponsor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Sponsor"
      responses:
        "201":
          description: HTTP 201 - Sponsor created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sponsor"
        "400":
          $ref: "#/components/responses/400Error"

    delete:
      tags:
        - Sponsor
      summary: Delete all sponsors
      responses:
        "200":
          description: HTTP 200 - Successfully deleted all sponsors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Sponsor"
        "404":
          $ref: "#/components/responses/404SponsorError"

  /v1/sponsors/{sponsor_id}:
    get:
      tags:
        - Sponsor
      summary: Get specified sponsor's information
      parameters:
        - name: sponsor_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: HTTP 200 - Successfully returned sponsor information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sponsor"
        "404":
          $ref: "#/components/responses/404SponsorError"

    put:
      tags:
        - Sponsor
      summary: Update specified sponsor's information
      parameters:
        - name: sponsor_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Sponsor"
      responses:
        "200":
          description: HTTP 200 - Successfully updated sponsor information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sponsor"
        "404":
          $ref: "#/components/responses/404SponsorError"

    delete:
      tags:
        - Sponsor
      summary: Delete specified sponsor
      parameters:
        - name: sponsor_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: HTTP 200 - Successfully deleted sponsor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sponsor"
        "404":
          $ref: "#/components/responses/404SponsorError"

  /v1/applications:
    get:
      tags:
        - Application
      summary: Get all applications
      parameters:
        - name: sponsor_id
          in: query
          description: To limit applications to those for a certain sponsor
          required: false
          schema:
            type: integer
        - name: driver_id
          in: query
          description: To limit applications to those for a certain driver
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: HTTP 200 - Successfully returned all applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Application"
        "404":
          $ref: "#/components/responses/404ApplicationError"

    post:
      tags:
        - Application
      summary: Create a new application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Application"
      responses:
        "201":
          description: HTTP 201 - Application created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
        "400":
          $ref: "#/components/responses/400Error"
          
    delete:
      tags:
        - Application
      summary: Delete all applications
      responses:
        "200":
          description: HTTP 200 - Successfully deleted all applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Application"
        "404":
          $ref: "#/components/responses/404ApplicationError"

  /v1/applications/{application_id}:
    get:
      tags:
        - Application
      summary: Get specified application
      parameters:
        - name: application_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: HTTP 200 - Successfully returned application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
        "404":
          $ref: "#/components/responses/404ApplicationError"

    put:
      tags:
        - Application
      summary: Update specified application
      parameters:
        - name: application_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Application"
      responses:
        "200":
          description: HTTP 200 - Successfully updated application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
        "404":
          $ref: "#/components/responses/404ApplicationError"

    delete:
      tags:
        - Application
      summary: Delete specified application
      parameters:
        - name: application_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: HTTP 200 - Successfully deleted application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
        "404":
          $ref: "#/components/responses/404ApplicationError"

  /v1/products:
    get:
      tags:
        - Product
      summary: Get all available products
      responses:
        "200":
          description: HTTP 200 - Successfully returned all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "404":
          $ref: "#/components/responses/404ProductError"

    post:
      tags:
        - Product
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: HTTP 201 - Product created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/400Error"

    delete:
      tags:
        - Product
      summary: Delete all products
      responses:
        "200":
          description: HTTP 200 - Successfully deleted all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "404":
          $ref: "#/components/responses/404ProductError"

  /v1/products/{product_id}:
    get:
      tags:
        - Product
      summary: Get specified product
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: HTTP 200 - Successfully returned product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          $ref: "#/components/responses/404ProductError"

    put:
      tags:
        - Product
      summary: Update specified product
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: HTTP 200 - Successfully updated product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          $ref: "#/components/responses/404ProductError"

    delete:
      tags:
        - Product
      summary: Delete specified product
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: HTTP 200 - Successfully deleted product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          $ref: "#/components/responses/404ProductError"

  /v1/products/{driver_id}:
    get:
      tags:
        - Product
      summary: Get products available to the specified driver
      parameters:
        - name: driver_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: HTTP 200 - Successfully returned products
          content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Product"
        "404":
          $ref: "#/components/responses/404DriverError"

  /v1/products/{sponsor_id}:
    get:
      tags:
        - Product
      summary: Get products in the specified sponsor's catalogue
      parameters:
        - name: sponsor_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: HTTP 200 - Successfully returned products
          content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Product"
        "404":
          $ref: "#/components/responses/404SponsorError"

    post:
      tags:
        - Product
      summary: Add a product to a sponsor's catalogue
      parameters:
        - name: sponsor_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: HTTP 201 - Product added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          $ref: "#/components/responses/404SponsorError"

  /v1/points:
    get:
      tags:
        - Point
      summary: Get all point log entries
      parameters:
        - name: sponsor_id
          in: query
          description: To limit point entries to those for a certain sponsor
          required: false
          schema:
            type: integer
        - name: driver_id
          in: query
          description: To limit point entries to those for a certain driver
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: HTTP 200 - Successfully returned all point log entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Point"
        "404":
          $ref: "#/components/responses/404PointError"

    post:
      tags:
        - Point
      summary: Create a new point log entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Point"
      responses:
        "201":
          description: HTTP 201 - Point log entry created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Point"
        "400":
          $ref: "#/components/responses/400Error"

    delete:
      tags:
        - Point
      summary: Delete all point log entries
      responses:
        "200":
          description: HTTP 200 - Successfully deleted all point log entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Point"
        "404":
          $ref: "#/components/responses/404PointError"



components:
  schemas:
    # Users
    User:
      type: object
      properties:
        user_id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password_hash:
          type: string
        user_type:
          type: string
      required:
        - first_name
        - last_name
        - email
        - password_hash
        - user_type

    # Addresses
    Address:
      type: object
      properties:
        address_id:
          type: integer
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zipcode:
          type: string
      required:
        - street
        - city
        - state
        - zipcode
      example:
        address_id: 1
        street: 123 Main St
        city: Sample City
        state: CA
        zipcode: 12345

    # Drivers
    Driver:
      type: object
      properties:
        user_id:
          type: integer
        vehicle_id:
          type: integer
        sponsor_id:
          type: integer
        address_id:
          type: integer
        biography:
          type: string
        phone_number:
          type: string
        date_of_birth:
          type: string
          format: date
        drivers_license_number:
          type: string
        cdl_class:
          type: string
        years_of_experience:
          type: integer
        accident_count:
          type: integer
        violation_count:
          type: integer
        suspended_license_incident:
          type: boolean
        point_balance:
          type: integer
      required:
        - user_id
        - biography
        - phone_number
        - date_of_birth
        - drivers_license_number
        - cdl_class
        - years_of_experience
        - accident_count
        - violation_count
        - suspended_license_incident
        - point_balance
      example:
        user_id: 1
        vehicle_id: 101
        sponsor_id: 2
        address_id: 3
        biography: Driver's biography...
        phone_number: +1234567890
        date_of_birth: 1990-05-15
        drivers_license_number: DL12345
        cdl_class: Class A
        years_of_experience: 5
        accident_count: 0
        violation_count: 1
        suspended_license_incident: false
        point_balance: 100

    # Sponsors
    Sponsor:
      type: object
      properties:
        user_id:
          type: integer
        organization_id:
          type: integer
        biography:
          type: string
        phone_number:
          type: string
      required:
        - organization_id
        - biography
        - phone_number
      example:
        user_id: 2
        organization_id: 5
        biography: Sponsor's biography...
        phone_number: +9876543210

    # Admins
    Admin:
      type: object
      properties:
        user_id:
          type: integer
      example:
        user_id: 6

    # Organizations
     Organization:
      type: object
      properties:
        organization_id:
          type: integer
        name:
          type: string
        biography:
          type: string
        address_id:
          type: integer
      required:
        - name
        - biography
      example:
        organization_id: 1
        name: Example Org
        biography: Organization's biography...
        address_id: 4

    # Vehicles
    Vehicle:
      type: object
      properties:
        vehicle_id:
          type: integer
        vehicle_type:
          type: string
        make:
          type: string
        model:
          type: string
        license_plate:
          type: string
        registration_expiry:
          type: string
          format: date
        insurance_provider:
          type: string
        insurance_policy_number:
          type: string
        insurance_policy_expiry:
          type: string
          format: date
      required:
        - vehicle_type
        - make
        - model
        - license_plate
        - registration_expiry
        - insurance_provider
        - insurance_policy_number
        - insurance_policy_expiry
      example:
        vehicle_id: 101
        vehicle_type: Sedan
        make: Toyota
        model: Camry
        license_plate: ABC123
        registration_expiry: 2023-12-31
        insurance_provider: Example Insurance
        insurance_policy_number: INS12345
        insurance_policy_expiry: 2024-06-30

    # Applications
    Application:
      type: object
      properties:
        application_id:
          type: integer
        driver_id:
          type: integer
        sponsor_id:
          type: integer
        reason_for_sponsorship:
          type: string
        terms_agreement:
          type: boolean
      required:
        - driver_id
        - sponsor_id
        - reason_for_sponsorship
      example:
        application_id: 1
        driver_id: 1
        sponsor_id: 2
        reason_for_sponsorship: Sponsorship request for...
        terms_agreement: true

    # Product Categories
    ProductCategory:
      type: object
      properties:
        category_id:
          type: integer
        name:
          type: string
        description:
          type: string
      required:
        - name
        - description
      example:
        category_id: 1
        name: Electronics
        description: Electronic products category


    # Products
    Product:
      type: object
      properties:
        product_id:
          type: integer
        name:
          type: string
        description:
          type: string
        image_url:
          type: string
        condition:
          type: string
        price:
          type: number
      required:
        - name
        - description
        - image_url
        - condition
        - price
      example:
        product_id: 1
        name: Example Product
        description: Product description...
        image_url: https://example.com/product.jpg
        condition: New
        price: 49.99

    # Sponsor-Product Relationship
    SponsorInventory:
      type: object
      properties:
        inventory_id:
          type: integer
        sponsor_id:
          type: integer
        product_id:
          type: integer
      required:
        - sponsor_id
        - product_id
      example:
        inventory_id: 1
        sponsor_id: 2
        product_id: 3

    # Points
    Point:
      type: object
      properties:
        point_id:
          type: integer
        driver_id:
          type: integer
        sponsor_id:
          type: integer
        amount:
          type: integer
        reason:
          type: string
        date:
          type: string
      required:
        - driver_id
        - sponsor_id
        - amount
        - reason
        - date
      example:
        point_id: 1
        driver_id: 1
        sponsor_id: 2
        amount: 100
        reason: Reward points
        date: 2023-01-15T10:30:00Z

    # Orders
    Order:
      type: object
      properties:
        order_id:
          type: integer
        driver_id:
          type: integer
        points_cost:
          type: integer
        usd_cost:
          type: number
        date:
          type: string
          format: date-time
      required:
        - driver_id
        - points_cost
        - usd_cost
        - date
      example:
        order_id: 1
        driver_id: 1
        points_cost: 100
        usd_cost: 50.99
        date: 2023-07-15T14:30:00Z

    # Order Products
    OrderProduct:
      type: object
      properties:
        order_product_id:
          type: integer
        order_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        points_cost:
          type: integer
      required:
        - order_id
        - product_id
        - quantity
        - points_cost
      example:
        order_product_id: 1
        order_id: 1
        product_id: 2
        quantity: 2
        points_cost: 40


  responses:
    400Error:
      description: HTTP 400 - Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    404DriverError:
      description: HTTP 404 - Driver not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    404SponsorError:
      description: HTTP 404 - Sponsor not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    
    404ApplicationError:
      description: HTTP 404 - Application not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    404ProductError:
      description: HTTP 404 - Product not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    404PointError:
      description: HTTP 404 - Point log entry not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    401UnauthorizedError:
      description: HTTP 401 - Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

  x-rate-limits:
    description: Rate limiting is applied to prevent abuse of the API. Requests beyond the rate limit will receive a '429 Too Many Requests' response.
    headers:
      X-RateLimit-Limit:
        description: The maximum number of requests allowed within the rate limit window.
      X-RateLimit-Remaining:
        description: The number of remaining requests within the current rate limit window.
      X-RateLimit-Reset:
        description: The time at which the rate limit window will reset.
    global:
      rateLimit: 30
      rateLimitPeriod: minute

tags:
  - name: Driver
    description: Operations related to drivers
  - name: Sponsor
    description: Operations related to sponsors
  - name: Application
    description: Operations related to applications
  - name: Product
    description: Operations related to products
  - name: Point
    description: Operations related to points
  - name: Auth
    description: Operations related to authentication
  - name: Ebay
    description: Operations related to ebay API
